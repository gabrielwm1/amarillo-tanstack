/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TextImport } from './routes/text'
import { Route as SelectImport } from './routes/select'
import { Route as LinkButtonsImport } from './routes/link-buttons'
import { Route as InputsImport } from './routes/inputs'
import { Route as IconButtonsImport } from './routes/icon-buttons'
import { Route as ButtonsImport } from './routes/buttons'
import { Route as BadgeImport } from './routes/badge'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TextRoute = TextImport.update({
  id: '/text',
  path: '/text',
  getParentRoute: () => rootRoute,
} as any)

const SelectRoute = SelectImport.update({
  id: '/select',
  path: '/select',
  getParentRoute: () => rootRoute,
} as any)

const LinkButtonsRoute = LinkButtonsImport.update({
  id: '/link-buttons',
  path: '/link-buttons',
  getParentRoute: () => rootRoute,
} as any)

const InputsRoute = InputsImport.update({
  id: '/inputs',
  path: '/inputs',
  getParentRoute: () => rootRoute,
} as any)

const IconButtonsRoute = IconButtonsImport.update({
  id: '/icon-buttons',
  path: '/icon-buttons',
  getParentRoute: () => rootRoute,
} as any)

const ButtonsRoute = ButtonsImport.update({
  id: '/buttons',
  path: '/buttons',
  getParentRoute: () => rootRoute,
} as any)

const BadgeRoute = BadgeImport.update({
  id: '/badge',
  path: '/badge',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/badge': {
      id: '/badge'
      path: '/badge'
      fullPath: '/badge'
      preLoaderRoute: typeof BadgeImport
      parentRoute: typeof rootRoute
    }
    '/buttons': {
      id: '/buttons'
      path: '/buttons'
      fullPath: '/buttons'
      preLoaderRoute: typeof ButtonsImport
      parentRoute: typeof rootRoute
    }
    '/icon-buttons': {
      id: '/icon-buttons'
      path: '/icon-buttons'
      fullPath: '/icon-buttons'
      preLoaderRoute: typeof IconButtonsImport
      parentRoute: typeof rootRoute
    }
    '/inputs': {
      id: '/inputs'
      path: '/inputs'
      fullPath: '/inputs'
      preLoaderRoute: typeof InputsImport
      parentRoute: typeof rootRoute
    }
    '/link-buttons': {
      id: '/link-buttons'
      path: '/link-buttons'
      fullPath: '/link-buttons'
      preLoaderRoute: typeof LinkButtonsImport
      parentRoute: typeof rootRoute
    }
    '/select': {
      id: '/select'
      path: '/select'
      fullPath: '/select'
      preLoaderRoute: typeof SelectImport
      parentRoute: typeof rootRoute
    }
    '/text': {
      id: '/text'
      path: '/text'
      fullPath: '/text'
      preLoaderRoute: typeof TextImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/badge': typeof BadgeRoute
  '/buttons': typeof ButtonsRoute
  '/icon-buttons': typeof IconButtonsRoute
  '/inputs': typeof InputsRoute
  '/link-buttons': typeof LinkButtonsRoute
  '/select': typeof SelectRoute
  '/text': typeof TextRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/badge': typeof BadgeRoute
  '/buttons': typeof ButtonsRoute
  '/icon-buttons': typeof IconButtonsRoute
  '/inputs': typeof InputsRoute
  '/link-buttons': typeof LinkButtonsRoute
  '/select': typeof SelectRoute
  '/text': typeof TextRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/badge': typeof BadgeRoute
  '/buttons': typeof ButtonsRoute
  '/icon-buttons': typeof IconButtonsRoute
  '/inputs': typeof InputsRoute
  '/link-buttons': typeof LinkButtonsRoute
  '/select': typeof SelectRoute
  '/text': typeof TextRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/badge'
    | '/buttons'
    | '/icon-buttons'
    | '/inputs'
    | '/link-buttons'
    | '/select'
    | '/text'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/badge'
    | '/buttons'
    | '/icon-buttons'
    | '/inputs'
    | '/link-buttons'
    | '/select'
    | '/text'
  id:
    | '__root__'
    | '/'
    | '/badge'
    | '/buttons'
    | '/icon-buttons'
    | '/inputs'
    | '/link-buttons'
    | '/select'
    | '/text'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BadgeRoute: typeof BadgeRoute
  ButtonsRoute: typeof ButtonsRoute
  IconButtonsRoute: typeof IconButtonsRoute
  InputsRoute: typeof InputsRoute
  LinkButtonsRoute: typeof LinkButtonsRoute
  SelectRoute: typeof SelectRoute
  TextRoute: typeof TextRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BadgeRoute: BadgeRoute,
  ButtonsRoute: ButtonsRoute,
  IconButtonsRoute: IconButtonsRoute,
  InputsRoute: InputsRoute,
  LinkButtonsRoute: LinkButtonsRoute,
  SelectRoute: SelectRoute,
  TextRoute: TextRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/badge",
        "/buttons",
        "/icon-buttons",
        "/inputs",
        "/link-buttons",
        "/select",
        "/text"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/badge": {
      "filePath": "badge.tsx"
    },
    "/buttons": {
      "filePath": "buttons.tsx"
    },
    "/icon-buttons": {
      "filePath": "icon-buttons.tsx"
    },
    "/inputs": {
      "filePath": "inputs.tsx"
    },
    "/link-buttons": {
      "filePath": "link-buttons.tsx"
    },
    "/select": {
      "filePath": "select.tsx"
    },
    "/text": {
      "filePath": "text.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
